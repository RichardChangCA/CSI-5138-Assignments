{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RNN_Vanilla_compare.ipynb（副本）","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"p1nPVgg4gXhC","colab_type":"code","outputId":"f3196c20-f7ee-4490-8652-ea8a384f62bf","executionInfo":{"status":"ok","timestamp":1571636257532,"user_tz":240,"elapsed":1956645,"user":{"displayName":"张凌峰","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAuUaJVuXZMaH5rtYmKwW-nhaKqW6F-HUuZPBqT=s64","userId":"03323910967581976476"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# NLP sentiment analysis\n","# compare final state and mean pool in vanilla rnn \n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import numpy as np\n","from tensorflow.python.keras.models import Sequential\n","from tensorflow.python.keras.layers import Dense, LSTM, SimpleRNN, Embedding\n","from tensorflow.python.keras.optimizers import Adam\n","from tensorflow.python.keras.preprocessing.text import Tokenizer\n","from tensorflow.python.keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","from keras import models, layers\n","\n","import os\n","base_dir = 'IMDB_dataset'\n","train_dir = os.path.join(base_dir,'train')\n","test_dir = os.path.join(base_dir,'test')\n","# train_pos = os.path.join(train_dir,'pos')\n","# train_neg = os.path.join(train_dir,'neg')\n","# test_pos = os.path.join(test_dir,'pos')\n","# test_neg = os.path.join(test_dir,'neg')\n","train_texts = []\n","train_labels = []\n","test_texts = []\n","test_labels = []\n","for label_type in ['pos','neg']:\n","  dir_name = os.path.join(train_dir,label_type)\n","  for fname in os.listdir(dir_name):\n","    if fname[-4:] == '.txt':\n","      f = open(os.path.join(dir_name,fname))\n","      train_texts.append(f.read())\n","      f.close()\n","      if label_type == 'neg':\n","        train_labels.append(0.0)\n","      else:\n","        train_labels.append(1.0)\n","for label_type in ['pos','neg']:\n","  dir_name = os.path.join(test_dir,label_type)\n","  for fname in os.listdir(dir_name):\n","    if fname[-4:] == '.txt':\n","      f = open(os.path.join(dir_name,fname))\n","      test_texts.append(f.read())\n","      f.close()\n","      if label_type == 'neg':\n","        test_labels.append(0.0)\n","      else:\n","        test_labels.append(1.0)\n","        \n","# print(f'Length of texts is {len(train_texts)}')\n","# print(f'Length of labels id {len(train_labels)}')\n","# print(f'Length of test_texts is {len(test_texts)}')\n","# print(f'Length of test_labels is {len(test_labels )}')\n","# for each is 25,000\n","\n","\n","max_length = 300\n","units = 50\n","#state dimension will be 20,50,100,200,500\n","\n","#try 20000\n","max_words = 10000\n","#import embedding vector with dimension 50\n","embedding_dimension = 50\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(train_texts)\n","sequences = tokenizer.texts_to_sequences(train_texts)\n","word_index = tokenizer.word_index\n","# print(f'Found {len(word_index)} unique tokens.')\n","# #use all kinds of vocabulary\n","# max_words = len(word_index)\n","train_data = pad_sequences(sequences,maxlen=max_length)\n","train_labels = np.array(train_labels)\n","# print(f'Shape of Data tensor is {train_data.shape}')\n","# print(f'Shape of Labels tensor is {train_labels.shape}')\n","X_train, X_val, y_train, y_val = train_test_split(train_data,train_labels,test_size=0.2,random_state=50)\n","glove_dir = os.path.join('drive','glove.6B.50d.txt')\n","embedding_index = {}\n","f = open(glove_dir)\n","for line in f:\n","  values = line.split()\n","  word = values[0]\n","  correlation_vector = np.array(values[1:],dtype='float32')\n","  embedding_index[word] = correlation_vector\n","f.close()\n","# print(f'Found {len(embedding_index)} word vectors')\n","# 400,000 word vectors\n","# print(embedding_index['great'])\n","embedding_matrix = np.zeros((max_words,embedding_dimension))\n","for word, i in word_index.items():\n","  if i < max_words:\n","    embedding_vector = embedding_index.get(word)\n","    if embedding_vector is not None:\n","      embedding_matrix[i] = embedding_vector\n","      \n","      \n","embedding_matrix2 = embedding_matrix.copy()\n","\n","# print(\"1\",np.sum(embedding_matrix))\n","# print(\"2\",np.sum(embedding_matrix2))\n","      \n","training_times = 20\n","#should be larger\n","      \n","model = models.Sequential()\n","model.add(layers.Embedding(max_words,embedding_dimension,input_length=max_length))\n","model.add(layers.SimpleRNN(units=units,return_sequences=True))\n","model.add(layers.TimeDistributed(layers.Dense(1,activation='sigmoid')))\n","model.add(layers.AveragePooling1D(max_length))\n","model.add(layers.Flatten())\n","model.summary()\n","model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False\n","model.compile(optimizer='Adam',loss='mean_squared_error',metrics=['acc'])\n","history = model.fit(X_train,y_train,epochs=training_times,batch_size=100,validation_data=(X_val,y_val))\n","\n","# have not updated embedding_matrix\n","# print(\"1_again\",np.sum(embedding_matrix))\n","# print(\"2_again\",np.sum(embedding_matrix2))\n","\n","model2 = models.Sequential()\n","model2.add(layers.Embedding(max_words,embedding_dimension,input_length=max_length))\n","#state dimension will be 20,50,100,200,500\n","# model.add(layers.LSTM(max_length))\n","model2.add(layers.SimpleRNN(units=units,return_sequences=False))\n","model2.add(layers.Dense(1,activation='sigmoid'))\n","model2.summary()\n","model2.layers[0].set_weights([embedding_matrix2])\n","model2.layers[0].trainable = False\n","model2.compile(optimizer='Adam',loss='mean_squared_error',metrics=['acc'])\n","history2 = model2.fit(X_train,y_train,epochs=training_times,batch_size=100,validation_data=(X_val,y_val))\n","\n","# Plot training & validation accuracy values\n","# plt.plot([0.0]+history.history['acc'])\n","plt.plot([0.0]+history.history['acc'],'-',label=\"Vanilla Mean Pool training\")\n","plt.plot([0.0]+history2.history['acc'],'-',label=\"Vanilla Final State training\")\n","plt.plot([0.0]+history.history['val_acc'],'-',label=\"Vanilla Mean Pool testing\")\n","plt.plot([0.0]+history2.history['val_acc'],'-',label=\"Vanilla Final State testing\")\n","plt.title('Model accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","# plt.legend(['Train', 'Test'], loc='lower right')\n","plt.legend(loc='lower right')\n","plt.show()\n","\n","# model.save_weights(\"model_weights.h5\")"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4271: The name tf.nn.avg_pool is deprecated. Please use tf.nn.avg_pool2d instead.\n","\n","Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 300, 50)           500000    \n","_________________________________________________________________\n","simple_rnn_1 (SimpleRNN)     (None, 300, 50)           5050      \n","_________________________________________________________________\n","time_distributed_1 (TimeDist (None, 300, 1)            51        \n","_________________________________________________________________\n","average_pooling1d_1 (Average (None, 1, 1)              0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 1)                 0         \n","=================================================================\n","Total params: 505,101\n","Trainable params: 505,101\n","Non-trainable params: 0\n","_________________________________________________________________\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Train on 20000 samples, validate on 5000 samples\n","Epoch 1/20\n","20000/20000 [==============================] - 52s 3ms/step - loss: 0.2314 - acc: 0.6338 - val_loss: 0.2147 - val_acc: 0.7012\n","Epoch 2/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2314 - acc: 0.6329 - val_loss: 0.2189 - val_acc: 0.6448\n","Epoch 3/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2093 - acc: 0.6938 - val_loss: 0.2065 - val_acc: 0.7140\n","Epoch 4/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2028 - acc: 0.7105 - val_loss: 0.2105 - val_acc: 0.7008\n","Epoch 5/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.1995 - acc: 0.7193 - val_loss: 0.2010 - val_acc: 0.7166\n","Epoch 6/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2017 - acc: 0.7056 - val_loss: 0.2234 - val_acc: 0.6534\n","Epoch 7/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2027 - acc: 0.7011 - val_loss: 0.2033 - val_acc: 0.7146\n","Epoch 8/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2152 - acc: 0.6777 - val_loss: 0.2336 - val_acc: 0.6842\n","Epoch 9/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2218 - acc: 0.6702 - val_loss: 0.2086 - val_acc: 0.6912\n","Epoch 10/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2117 - acc: 0.6795 - val_loss: 0.2035 - val_acc: 0.7028\n","Epoch 11/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2044 - acc: 0.7026 - val_loss: 0.2003 - val_acc: 0.7274\n","Epoch 12/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2121 - acc: 0.6824 - val_loss: 0.2138 - val_acc: 0.6434\n","Epoch 13/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.1978 - acc: 0.7210 - val_loss: 0.1971 - val_acc: 0.7328\n","Epoch 14/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2012 - acc: 0.7045 - val_loss: 0.2905 - val_acc: 0.5066\n","Epoch 15/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2052 - acc: 0.6974 - val_loss: 0.1990 - val_acc: 0.7080\n","Epoch 16/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.1979 - acc: 0.7257 - val_loss: 0.2019 - val_acc: 0.7108\n","Epoch 17/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.1958 - acc: 0.7231 - val_loss: 0.1980 - val_acc: 0.7282\n","Epoch 18/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2056 - acc: 0.7000 - val_loss: 0.1955 - val_acc: 0.7254\n","Epoch 19/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2027 - acc: 0.7085 - val_loss: 0.1949 - val_acc: 0.7406\n","Epoch 20/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2036 - acc: 0.7061 - val_loss: 0.1947 - val_acc: 0.7336\n","Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 300, 50)           500000    \n","_________________________________________________________________\n","simple_rnn_2 (SimpleRNN)     (None, 50)                5050      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 51        \n","=================================================================\n","Total params: 505,101\n","Trainable params: 505,101\n","Non-trainable params: 0\n","_________________________________________________________________\n","Train on 20000 samples, validate on 5000 samples\n","Epoch 1/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2447 - acc: 0.5694 - val_loss: 0.2204 - val_acc: 0.6416\n","Epoch 2/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2361 - acc: 0.6057 - val_loss: 0.2374 - val_acc: 0.5908\n","Epoch 3/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2311 - acc: 0.6191 - val_loss: 0.2256 - val_acc: 0.6262\n","Epoch 4/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2390 - acc: 0.5908 - val_loss: 0.2379 - val_acc: 0.5848\n","Epoch 5/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2327 - acc: 0.6045 - val_loss: 0.2308 - val_acc: 0.6112\n","Epoch 6/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2234 - acc: 0.6329 - val_loss: 0.2144 - val_acc: 0.6644\n","Epoch 7/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2119 - acc: 0.6680 - val_loss: 0.2103 - val_acc: 0.6718\n","Epoch 8/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2056 - acc: 0.6838 - val_loss: 0.1945 - val_acc: 0.7132\n","Epoch 9/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2046 - acc: 0.6878 - val_loss: 0.1947 - val_acc: 0.7076\n","Epoch 10/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2209 - acc: 0.6388 - val_loss: 0.2110 - val_acc: 0.6538\n","Epoch 11/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2212 - acc: 0.6531 - val_loss: 0.2511 - val_acc: 0.5242\n","Epoch 12/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2397 - acc: 0.5790 - val_loss: 0.2370 - val_acc: 0.5934\n","Epoch 13/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2326 - acc: 0.6079 - val_loss: 0.2308 - val_acc: 0.6094\n","Epoch 14/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2233 - acc: 0.6344 - val_loss: 0.2179 - val_acc: 0.6450\n","Epoch 15/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2117 - acc: 0.6698 - val_loss: 0.2367 - val_acc: 0.6144\n","Epoch 16/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2257 - acc: 0.6422 - val_loss: 0.2447 - val_acc: 0.5474\n","Epoch 17/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2389 - acc: 0.5862 - val_loss: 0.2380 - val_acc: 0.5796\n","Epoch 18/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2349 - acc: 0.5968 - val_loss: 0.2348 - val_acc: 0.5908\n","Epoch 19/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.2315 - acc: 0.6045 - val_loss: 0.2320 - val_acc: 0.6012\n","Epoch 20/20\n","20000/20000 [==============================] - 49s 2ms/step - loss: 0.2284 - acc: 0.6159 - val_loss: 0.2291 - val_acc: 0.6140\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"59Vfd4b9iN5b","colab_type":"code","outputId":"890d4818-aadd-4665-d786-3ef8cbee8c66","executionInfo":{"status":"ok","timestamp":1571634294807,"user_tz":240,"elapsed":112102,"user":{"displayName":"张凌峰","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAuUaJVuXZMaH5rtYmKwW-nhaKqW6F-HUuZPBqT=s64","userId":"03323910967581976476"}},"colab":{"base_uri":"https://localhost:8080/","height":912}},"source":["!rm -rf *\n","!git clone https://github.com/RichardChangCA/IMDB_dataset.git\n","!ls IMDB_dataset/\n","\n","\n","!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n","!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n","!apt-get update -qq 2>&1 > /dev/null\n","!apt-get -y install -qq google-drive-ocamlfuse fuse\n","from google.colab import auth\n","auth.authenticate_user()\n","from oauth2client.client import GoogleCredentials\n","creds = GoogleCredentials.get_application_default()\n","import getpass\n","!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\n","vcode = getpass.getpass()\n","!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n","\n","!mkdir -p drive\n","!google-drive-ocamlfuse drive\n","\n","!ls drive"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Cloning into 'IMDB_dataset'...\n","remote: Enumerating objects: 8, done.\u001b[K\n","remote: Counting objects: 100% (8/8), done.\u001b[K\n","remote: Compressing objects: 100% (6/6), done.\u001b[K\n","remote: Total 98504 (delta 1), reused 8 (delta 1), pack-reused 98496\u001b[K\n","Receiving objects: 100% (98504/98504), 95.63 MiB | 19.49 MiB/s, done.\n","Resolving deltas: 100% (9/9), done.\n","Checking out files: 100% (200029/200029), done.\n","aclImdb\t\t   glove.6B.50d.txt  imdb.vocab  test\n","glove.6B.100d.txt  imdbEr.txt\t     README\t train\n","E: Package 'python-software-properties' has no installation candidate\n","Selecting previously unselected package google-drive-ocamlfuse.\n","(Reading database ... 131183 files and directories currently installed.)\n","Preparing to unpack .../google-drive-ocamlfuse_0.7.13-0ubuntu1~ubuntu18.04.1_amd64.deb ...\n","Unpacking google-drive-ocamlfuse (0.7.13-0ubuntu1~ubuntu18.04.1) ...\n","Setting up google-drive-ocamlfuse (0.7.13-0ubuntu1~ubuntu18.04.1) ...\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n","Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n","··········\n","Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n","Please enter the verification code: Access token retrieved correctly.\n","'Colab Notebooks'\n","'Copy of DL_A1_Collection-checkpoint.ipynb（副本）'\n","'DL_module01 (01570add).pdf'\n"," DL_module01.pdf\n"," DL_module02.pdf\n"," glove.6B.50d.txt\n"," RNN_finalState.ipynb\n"," RNN_Vanilla_compare.ipynb（副本）\n"," Topic1_IngredientsML.pdf\n","'Topic2_ClassificationEval (22347a07).pdf'\n"," Topic2_ClassificationEval.pdf\n"],"name":"stdout"}]}]}