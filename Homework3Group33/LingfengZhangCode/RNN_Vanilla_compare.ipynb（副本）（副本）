{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RNN_Vanilla_compare.ipynb（副本）（副本）","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"p1nPVgg4gXhC","colab_type":"code","outputId":"18e1ba62-d0f5-4afa-a2e5-5113bc7d5a30","executionInfo":{"status":"ok","timestamp":1571666252868,"user_tz":240,"elapsed":1885216,"user":{"displayName":"张凌峰","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAuUaJVuXZMaH5rtYmKwW-nhaKqW6F-HUuZPBqT=s64","userId":"03323910967581976476"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# NLP sentiment analysis\n","# compare final state and mean pool in vanilla rnn \n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import numpy as np\n","from tensorflow.python.keras.models import Sequential\n","from tensorflow.python.keras.layers import Dense, LSTM, SimpleRNN, Embedding\n","from tensorflow.python.keras.optimizers import Adam\n","from tensorflow.python.keras.preprocessing.text import Tokenizer\n","from tensorflow.python.keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","from keras import models, layers\n","\n","import os\n","base_dir = 'IMDB_dataset'\n","train_dir = os.path.join(base_dir,'train')\n","test_dir = os.path.join(base_dir,'test')\n","# train_pos = os.path.join(train_dir,'pos')\n","# train_neg = os.path.join(train_dir,'neg')\n","# test_pos = os.path.join(test_dir,'pos')\n","# test_neg = os.path.join(test_dir,'neg')\n","train_texts = []\n","train_labels = []\n","test_texts = []\n","test_labels = []\n","for label_type in ['pos','neg']:\n","  dir_name = os.path.join(train_dir,label_type)\n","  for fname in os.listdir(dir_name):\n","    if fname[-4:] == '.txt':\n","      f = open(os.path.join(dir_name,fname))\n","      train_texts.append(f.read())\n","      f.close()\n","      if label_type == 'neg':\n","        train_labels.append(0.0)\n","      else:\n","        train_labels.append(1.0)\n","for label_type in ['pos','neg']:\n","  dir_name = os.path.join(test_dir,label_type)\n","  for fname in os.listdir(dir_name):\n","    if fname[-4:] == '.txt':\n","      f = open(os.path.join(dir_name,fname))\n","      test_texts.append(f.read())\n","      f.close()\n","      if label_type == 'neg':\n","        test_labels.append(0.0)\n","      else:\n","        test_labels.append(1.0)\n","        \n","# print(f'Length of texts is {len(train_texts)}')\n","# print(f'Length of labels id {len(train_labels)}')\n","# print(f'Length of test_texts is {len(test_texts)}')\n","# print(f'Length of test_labels is {len(test_labels )}')\n","# for each is 25,000\n","\n","\n","max_length = 300\n","units = 50\n","#state dimension will be 20,50,100,200,500\n","\n","#try 20000\n","max_words = 10000\n","#import embedding vector with dimension 50\n","embedding_dimension = 50\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(train_texts)\n","sequences = tokenizer.texts_to_sequences(train_texts)\n","word_index = tokenizer.word_index\n","# print(f'Found {len(word_index)} unique tokens.')\n","# #use all kinds of vocabulary\n","# max_words = len(word_index)\n","train_data = pad_sequences(sequences,maxlen=max_length)\n","train_labels = np.array(train_labels)\n","# print(f'Shape of Data tensor is {train_data.shape}')\n","# print(f'Shape of Labels tensor is {train_labels.shape}')\n","X_train, X_val, y_train, y_val = train_test_split(train_data,train_labels,test_size=0.2,random_state=50)\n","glove_dir = os.path.join('drive','glove.6B.50d.txt')\n","embedding_index = {}\n","f = open(glove_dir)\n","for line in f:\n","  values = line.split()\n","  word = values[0]\n","  correlation_vector = np.array(values[1:],dtype='float32')\n","  embedding_index[word] = correlation_vector\n","f.close()\n","# print(f'Found {len(embedding_index)} word vectors')\n","# 400,000 word vectors\n","# print(embedding_index['great'])\n","embedding_matrix = np.zeros((max_words,embedding_dimension))\n","for word, i in word_index.items():\n","  if i < max_words:\n","    embedding_vector = embedding_index.get(word)\n","    if embedding_vector is not None:\n","      embedding_matrix[i] = embedding_vector\n","      \n","      \n","embedding_matrix2 = embedding_matrix.copy()\n","\n","# print(\"1\",np.sum(embedding_matrix))\n","# print(\"2\",np.sum(embedding_matrix2))\n","      \n","training_times = 20\n","#should be larger\n","      \n","model = models.Sequential()\n","model.add(layers.Embedding(max_words,embedding_dimension,input_length=max_length))\n","model.add(layers.SimpleRNN(units=units,return_sequences=True))\n","model.add(layers.TimeDistributed(layers.Dense(1,activation='sigmoid')))\n","model.add(layers.AveragePooling1D(max_length))\n","model.add(layers.Flatten())\n","model.summary()\n","model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False\n","model.compile(optimizer='Adam',loss='mean_squared_error',metrics=['acc'])\n","history = model.fit(X_train,y_train,epochs=training_times,batch_size=100,validation_data=(X_val,y_val))\n","\n","# have not updated embedding_matrix\n","# print(\"1_again\",np.sum(embedding_matrix))\n","# print(\"2_again\",np.sum(embedding_matrix2))\n","\n","model2 = models.Sequential()\n","model2.add(layers.Embedding(max_words,embedding_dimension,input_length=max_length))\n","#state dimension will be 20,50,100,200,500\n","# model.add(layers.LSTM(max_length))\n","model2.add(layers.SimpleRNN(units=units,return_sequences=False))\n","model2.add(layers.Dense(1,activation='sigmoid'))\n","model2.summary()\n","model2.layers[0].set_weights([embedding_matrix2])\n","model2.layers[0].trainable = False\n","model2.compile(optimizer='Adam',loss='mean_squared_error',metrics=['acc'])\n","history2 = model2.fit(X_train,y_train,epochs=training_times,batch_size=100,validation_data=(X_val,y_val))\n","\n","# Plot training & validation accuracy values\n","# plt.plot([0.0]+history.history['acc'])\n","plt.plot([0.0]+history.history['acc'],'-',label=\"Vanilla Mean Pool training\")\n","plt.plot([0.0]+history2.history['acc'],'-',label=\"Vanilla Final State training\")\n","plt.plot([0.0]+history.history['val_acc'],'-',label=\"Vanilla Mean Pool testing\")\n","plt.plot([0.0]+history2.history['val_acc'],'-',label=\"Vanilla Final State testing\")\n","plt.title('Model accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","# plt.legend(['Train', 'Test'], loc='lower right')\n","plt.legend(loc='lower right')\n","plt.show()\n","\n","# model.save_weights(\"model_weights.h5\")"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4271: The name tf.nn.avg_pool is deprecated. Please use tf.nn.avg_pool2d instead.\n","\n","Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 300, 50)           500000    \n","_________________________________________________________________\n","simple_rnn_1 (SimpleRNN)     (None, 300, 50)           5050      \n","_________________________________________________________________\n","time_distributed_1 (TimeDist (None, 300, 1)            51        \n","_________________________________________________________________\n","average_pooling1d_1 (Average (None, 1, 1)              0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 1)                 0         \n","=================================================================\n","Total params: 505,101\n","Trainable params: 505,101\n","Non-trainable params: 0\n","_________________________________________________________________\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Train on 20000 samples, validate on 5000 samples\n","Epoch 1/20\n","20000/20000 [==============================] - 51s 3ms/step - loss: 0.2343 - acc: 0.6120 - val_loss: 0.2337 - val_acc: 0.5768\n","Epoch 2/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2104 - acc: 0.6825 - val_loss: 0.2105 - val_acc: 0.6662\n","Epoch 3/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2019 - acc: 0.7085 - val_loss: 0.2016 - val_acc: 0.7202\n","Epoch 4/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2412 - acc: 0.6566 - val_loss: 0.3245 - val_acc: 0.5116\n","Epoch 5/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2519 - acc: 0.5976 - val_loss: 0.2207 - val_acc: 0.7066\n","Epoch 6/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2196 - acc: 0.6629 - val_loss: 0.2094 - val_acc: 0.7070\n","Epoch 7/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2072 - acc: 0.6977 - val_loss: 0.1991 - val_acc: 0.7198\n","Epoch 8/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1972 - acc: 0.7210 - val_loss: 0.2064 - val_acc: 0.6832\n","Epoch 9/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1936 - acc: 0.7296 - val_loss: 0.1976 - val_acc: 0.7210\n","Epoch 10/20\n","20000/20000 [==============================] - 48s 2ms/step - loss: 0.1913 - acc: 0.7364 - val_loss: 0.1931 - val_acc: 0.7408\n","Epoch 11/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.1890 - acc: 0.7456 - val_loss: 0.1913 - val_acc: 0.7408\n","Epoch 12/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1915 - acc: 0.7389 - val_loss: 0.1917 - val_acc: 0.7486\n","Epoch 13/20\n","20000/20000 [==============================] - 45s 2ms/step - loss: 0.1911 - acc: 0.7376 - val_loss: 0.1970 - val_acc: 0.7352\n","Epoch 14/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1908 - acc: 0.7399 - val_loss: 0.1959 - val_acc: 0.7314\n","Epoch 15/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1955 - acc: 0.7279 - val_loss: 0.2022 - val_acc: 0.7174\n","Epoch 16/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2111 - acc: 0.6865 - val_loss: 0.2208 - val_acc: 0.6584\n","Epoch 17/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2132 - acc: 0.6789 - val_loss: 0.1969 - val_acc: 0.7270\n","Epoch 18/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1965 - acc: 0.7246 - val_loss: 0.1927 - val_acc: 0.7446\n","Epoch 19/20\n","20000/20000 [==============================] - 45s 2ms/step - loss: 0.1943 - acc: 0.7303 - val_loss: 0.1931 - val_acc: 0.7440\n","Epoch 20/20\n","20000/20000 [==============================] - 45s 2ms/step - loss: 0.1877 - acc: 0.7513 - val_loss: 0.1967 - val_acc: 0.7186\n","Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 300, 50)           500000    \n","_________________________________________________________________\n","simple_rnn_2 (SimpleRNN)     (None, 50)                5050      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 51        \n","=================================================================\n","Total params: 505,101\n","Trainable params: 505,101\n","Non-trainable params: 0\n","_________________________________________________________________\n","Train on 20000 samples, validate on 5000 samples\n","Epoch 1/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2441 - acc: 0.5794 - val_loss: 0.2337 - val_acc: 0.6098\n","Epoch 2/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2139 - acc: 0.6620 - val_loss: 0.2121 - val_acc: 0.6790\n","Epoch 3/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2052 - acc: 0.6894 - val_loss: 0.2122 - val_acc: 0.6818\n","Epoch 4/20\n","20000/20000 [==============================] - 45s 2ms/step - loss: 0.2241 - acc: 0.6372 - val_loss: 0.2144 - val_acc: 0.6708\n","Epoch 5/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2135 - acc: 0.6676 - val_loss: 0.2368 - val_acc: 0.5948\n","Epoch 6/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2290 - acc: 0.6247 - val_loss: 0.2251 - val_acc: 0.6308\n","Epoch 7/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2204 - acc: 0.6447 - val_loss: 0.2336 - val_acc: 0.6028\n","Epoch 8/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2348 - acc: 0.6089 - val_loss: 0.2329 - val_acc: 0.5970\n","Epoch 9/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2159 - acc: 0.6644 - val_loss: 0.2404 - val_acc: 0.5660\n","Epoch 10/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2262 - acc: 0.6279 - val_loss: 0.2084 - val_acc: 0.6722\n","Epoch 11/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.1970 - acc: 0.7037 - val_loss: 0.2000 - val_acc: 0.6944\n","Epoch 12/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2023 - acc: 0.6975 - val_loss: 0.1973 - val_acc: 0.7014\n","Epoch 13/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.1994 - acc: 0.7026 - val_loss: 0.2001 - val_acc: 0.6976\n","Epoch 14/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2169 - acc: 0.6603 - val_loss: 0.2217 - val_acc: 0.6364\n","Epoch 15/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2079 - acc: 0.6802 - val_loss: 0.2021 - val_acc: 0.6842\n","Epoch 16/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.1967 - acc: 0.7032 - val_loss: 0.2422 - val_acc: 0.5628\n","Epoch 17/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2312 - acc: 0.6080 - val_loss: 0.2306 - val_acc: 0.6072\n","Epoch 18/20\n","20000/20000 [==============================] - 47s 2ms/step - loss: 0.2227 - acc: 0.6359 - val_loss: 0.2258 - val_acc: 0.6202\n","Epoch 19/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2156 - acc: 0.6553 - val_loss: 0.2173 - val_acc: 0.6432\n","Epoch 20/20\n","20000/20000 [==============================] - 46s 2ms/step - loss: 0.2102 - acc: 0.6695 - val_loss: 0.2025 - val_acc: 0.6920\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"59Vfd4b9iN5b","colab_type":"code","outputId":"6d7ba512-67b4-46b1-a149-69444ea2e8db","executionInfo":{"status":"ok","timestamp":1571664363381,"user_tz":240,"elapsed":104327,"user":{"displayName":"张凌峰","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAuUaJVuXZMaH5rtYmKwW-nhaKqW6F-HUuZPBqT=s64","userId":"03323910967581976476"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["!rm -rf *\n","!git clone https://github.com/RichardChangCA/IMDB_dataset.git\n","!ls IMDB_dataset/\n","\n","\n","!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n","!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n","!apt-get update -qq 2>&1 > /dev/null\n","!apt-get -y install -qq google-drive-ocamlfuse fuse\n","from google.colab import auth\n","auth.authenticate_user()\n","from oauth2client.client import GoogleCredentials\n","creds = GoogleCredentials.get_application_default()\n","import getpass\n","!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\n","vcode = getpass.getpass()\n","!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n","\n","!mkdir -p drive\n","!google-drive-ocamlfuse drive\n","\n","!ls drive"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Cloning into 'IMDB_dataset'...\n","remote: Enumerating objects: 8, done.\u001b[K\n","remote: Counting objects: 100% (8/8), done.\u001b[K\n","remote: Compressing objects: 100% (6/6), done.\u001b[K\n","remote: Total 98504 (delta 1), reused 8 (delta 1), pack-reused 98496\n","Receiving objects: 100% (98504/98504), 95.63 MiB | 17.83 MiB/s, done.\n","Resolving deltas: 100% (9/9), done.\n","Checking out files: 100% (200029/200029), done.\n","aclImdb\t\t   glove.6B.50d.txt  imdb.vocab  test\n","glove.6B.100d.txt  imdbEr.txt\t     README\t train\n","E: Package 'python-software-properties' has no installation candidate\n","Selecting previously unselected package google-drive-ocamlfuse.\n","(Reading database ... 131183 files and directories currently installed.)\n","Preparing to unpack .../google-drive-ocamlfuse_0.7.13-0ubuntu1~ubuntu18.04.1_amd64.deb ...\n","Unpacking google-drive-ocamlfuse (0.7.13-0ubuntu1~ubuntu18.04.1) ...\n","Setting up google-drive-ocamlfuse (0.7.13-0ubuntu1~ubuntu18.04.1) ...\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n","Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n","··········\n","Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n","Please enter the verification code: Access token retrieved correctly.\n","'Colab Notebooks'\n","'Copy of DL_A1_Collection-checkpoint.ipynb（副本）'\n","'DL_module01 (01570add).pdf'\n"," DL_module01.pdf\n"," DL_module02.pdf\n"," glove.6B.50d.txt\n"," RNN_finalState.ipynb\n"," RNN_Vanilla_compare.ipynb（副本）\n"," RNN_Vanilla_compare.ipynb（副本）（副本）\n"," Topic1_IngredientsML.pdf\n","'Topic2_ClassificationEval (22347a07).pdf'\n"," Topic2_ClassificationEval.pdf\n"],"name":"stdout"}]}]}